sps.set_testdf <- data.frame(
lambda = sps.set,
mse = mse.sps.set,
nzero = sps.set_df$nzero,
percent_diff = ((mse.sps.set - min_mse_test) / min_mse_test) * 100)
#Create another plot of mean MSE % over the lambda min, versus lambda values, but this time for sps.set testing results.
sps.set_testPlot <- ggplot(sps.set_testdf, aes(x = log(lambda), y = percent_diff)) +
geom_point(aes(size = nzero), alpha = 0.75) +  # Size mapping reintroduced with nzero
geom_line() +
geom_point(data = sps.set_testdf[9, ], color = "orange", size = 5, shape = 8, alpha = 0.6) + #Highlight alternative model choice
geom_text(aes(label = nzero), vjust = -0.8, hjust = 2, color = "darkgrey", size = 3.5) +  # nzero labels reintroduced
geom_text(data = sps.set_testdf[9, ], aes(label = sprintf("lambda = %.6f", lambda)), vjust = 0, hjust = 1.2, color = "orange") +
scale_size_continuous(range = c(1, 6), guide = "none") +
scale_y_continuous(breaks = function(x) pretty(x, n = 10, min.n = 2)) +
theme_minimal() +
labs(title = "MSE % Change vs. Log(λ) for Testing sps.set Models",
x = "Log(Lambda)",
y = "% Difference from Lambda.min MSE")
sps.set_testPlot
#We can combine the lines from the training and testing % change MSE plots to look at the behaviour of the model error in testing and training compared to the best model
combinedPlot <- ggplot() +
#Training data - Blue
geom_line(data = sps.set_df, aes(x = log(lambda), y = percent_diff, group = 1), color = "blue") +
geom_point(data = sps.set_df, aes(x = log(lambda), y = percent_diff), alpha = 0.75, color = "blue", size = 2) +
geom_point(data = sps.set_df[9, ], aes(x = log(lambda), y = percent_diff), color = "blue", size = 5, shape = 8, alpha = 0.6) +
#Testing data - Orange
geom_line(data = sps.set_testdf, aes(x = log(lambda), y = percent_diff, group = 1), color = "orange") +
geom_point(data = sps.set_testdf, aes(x = log(lambda), y = percent_diff), alpha = 0.75, color = "orange", size = 2) +
geom_point(data = sps.set_testdf[9, ], aes(x = log(lambda), y = percent_diff), color = "orange", size = 5, shape = 8, alpha = 0.6) +
scale_y_continuous(breaks = function(x) pretty(x, n = 10, min.n = 2)) +
theme_minimal() +
labs(title = "MSE % Change vs. Log(λ) for sps.set Models: Training(Blue) vs. Testing(Orange)",
x = "Log(Lambda)",
y = "% Difference from Lambda.min MSE")
combinedPlot
residuals <- y_testing - predict(lassoCV, newx = x_testing, s = lassoCV$lambda.min)
# Calculate estimated standard deviation of residuals.
residual_sd <- sd(residuals)
# Standardize residuals for diagnostic plots, as they are converted back to non standardized form by glmnet for outputs!
standardized_residuals <- residuals / residual_sd
# Fit a linear model using the standardized residuals for the diagnostic plots.
diagnostic_lm_model <- lm(standardized_residuals ~ predict(lassoCV, newx = x_testing, s = lassoCV$lambda.min))
# Visualize the diagnostic plots.
plot(diagnostic_lm_model)
install.packages("googlesheets4")
library(googlesheets4)
library(tidyverse)
library(dplyr)
library(stringr)
#Read in Time_Log Database
tldb <- read_sheet("https://docs.google.com/spreadsheets/d/1hfJoIKbL3vpD8q93ewuUSbIqOIXzI2v7FYNGMUTx8WE/edit#gid=1161886242", sheet = "TLDB")
#-------Creating Day Summary Data
Day_Log <- tldb %>%
filter(!is.na(Date_format))%>%
group_by(Date_format) %>%
summarise(
# Sum Academic Work Minutes
`Academic Work` = round(sum(ifelse(str_detect(Activity_1, "Academic") | str_detect(Activity_2, "Academic"), Duration, 0), na.rm = TRUE) / 60, 2),
`Focused Work` = round(sum(ifelse(str_detect(Activity_Area, "Focused_Work"), Duration, 0), na.rm = TRUE) / 60, 2), # Added closing parenthesis here
#Sum Mobility Minutes
`Mobility (h)` = round(sum(ifelse(str_detect(Activity_1, "Mobility"), Duration, 0), na.rm = TRUE) / 60, 2),
`Spiritual (h)` = round(sum(ifelse(str_detect(Activity_1, "Meditation"), Duration, 0), na.rm = TRUE) / 60, 2),
`Pages` = sum(Pages, na.rm = TRUE),
`Fascial Role` = as.integer(any(str_detect(Mobility_exercises, "Fascial_role"), na.rm = TRUE)),
`Hamstring Stretch` = as.integer(any(str_detect(Mobility_exercises, "Hamstring_stretch"), na.rm = TRUE)),
`Piriformis Stretch` = as.integer(any(str_detect(Mobility_exercises, "Piriformis_stretch"), na.rm = TRUE)),
`Childs Pose` = as.integer(any(str_detect(Mobility_exercises, "Childs_pose"), na.rm = TRUE)),
`Blaster Pose` = as.integer(any(str_detect(Mobility_exercises, "Blaster_pose"), na.rm = TRUE)),
`Hip Challenge` = as.integer(any(str_detect(Mobility_exercises, "Hip_challenge"), na.rm = TRUE)),
`Pigeon Pose` = as.integer(any(str_detect(Mobility_exercises, "Pigeon_pose"), na.rm = TRUE)),
`Cat Cow` = as.integer(any(str_detect(Mobility_exercises, "Cat_cow"), na.rm = TRUE)),
#Sum # of exercises
`Mobility Exercises` = (`Cat Cow` + `Fascial Role` + `Hamstring Stretch` + `Piriformis Stretch` + `Childs Pose` + `Blaster Pose` + `Hip Challenge` + `Pigeon Pose`),
`Mobility?` = ifelse(`Mobility Exercises` > 0, 1,0),
`Mobility Score` =  `Mobility?` + `Mobility (h)` + (`Mobility Exercises` /6 ),
# Convert TRUE/FALSE to 1/0 for vitamins presence
`Vit K` = as.integer(any(Vitamin_K2 > 0, na.rm = TRUE)),
`Vit A` = as.integer(any(Vitamin_A > 0, na.rm = TRUE)),
`Vit D` = as.integer(any(Vitamin_D > 0, na.rm = TRUE)),
`Vit C` = as.integer(any(Vitamin_C > 0, na.rm = TRUE)),
`Magnesium` = as.integer(any(Magnesium > 0, na.rm = TRUE)),
#Hygiene Habit List
`Brush` = as.integer(any(str_detect(Hygiene_habits, "Brush_teeth"), na.rm = TRUE)),
`Floss` = as.integer(any(str_detect(Hygiene_habits, "Floss_teeth"), na.rm = TRUE)),
`Cleanse` = as.integer(any(str_detect(Hygiene_habits, "Cleanse_face"), na.rm = TRUE)),
`Moisturize` = as.integer(any(str_detect(Hygiene_habits, "Moisturize_face"), na.rm = TRUE)),
`Finasteride` = as.integer(any(str_detect(Hygiene_habits, "Finasteride"), na.rm = TRUE)),
`Sunscreen` = as.integer(any(str_detect(Hygiene_habits, "Sunscreen"), na.rm = TRUE)),
`Shave` = as.integer(any(str_detect(Hygiene_habits, "Shave_face"), na.rm = TRUE)),
`Vitamin Score` = (`Vit K` + `Vit C`+ `Vit A` + `Vit D` + `Magnesium`)/2,
`Hygiene Score` = (`Brush`*1.5 + `Floss`*1.5 + `Cleanse` + `Moisturize` + `Finasteride` + `Sunscreen` + `Shave`)/3.5,
`Bought_Coffee` = as.integer(sum(str_detect(Beverage, "Coffee_bought"), na.rm = TRUE)),
`Health Score` = round(`Mobility Score` + `Vitamin Score` + `Hygiene Score` + `Spiritual (h)`,2),
`Productivity Score` = `Focused Work`
)
Productivity <- TDB %>%
filter(!is.na(Official_completed)) %>%
group_by(Official_completed)%>%
summarise(`Tasks Completed` = n(),  Reschedules = sum(Reschedule_count, na.rm = TRUE))
View(Day_Log)
plot(Day_Log$`Health Score`, Day_Log$`Productivity Score`)
plot(log(Day_Log$`Health Score`) (Day_Log$`Productivity Score`))
plot(log(Day_Log$`Health Score`), log(Day_Log$`Productivity Score`))
plot(log(Day_Log$`Productivity Scire`), log(Day_Log$`Hygiene Score`))
plot(log(Day_Log$`Productivity Scire`), log(Day_Log$`Hygiene Score`))
plot(log(Day_Log$`Productivity Scire`), log(Day_Log$`Hygiene Score`))
plot(log(Day_Log$`Productivity Score`), log(Day_Log$`Hygiene Score`))
plot(Day_Log$`Productivity Score`), Day_Log$`Hygiene Score`)
plot(Day_Log$`Productivity Score`, Day_Log$`Hygiene Score`)
plot(Day_Log$`Productivity Score`, Day_Log$`Bought_Coffee`)
plot(Day_Log$`Bought_Coffee`, Day_Log$`Productivity Score`)
lm(Day_Log$`Productivity Score`~ Day_Log$Bought_Coffee)
lm(Day_Log$`Productivity Score`~ Day_Log$`Hygiene Score`)
lm(Day_Log$`Productivity Score`~ Day_Log$`Hygiene Score`+ Day_Log$`Bought_Coffee`)
lm(Day_Log$`Productivity Score`~ Day_Log$`Hygiene Score`+ Day_Log$`Bought_Coffee`+ Day_Log$`Mobility (m)`)
lm(Day_Log$`Productivity Score`~ Day_Log$`Hygiene Score`+ Day_Log$`Bought_Coffee`+ Day_Log$`Mobility (h)`)
lm(Day_Log$`Productivity Score`~ Day_Log$`Hygiene Score`+ Day_Log$`Bought_Coffee`+ Day_Log$`Mobility score`)
lm(Day_Log$`Productivity Score`~ Day_Log$`Hygiene Score`+ Day_Log$`Bought_Coffee`+ Day_Log$`Mobility Score`)
lm(Day_Log$`Productivity Score`~ .)
lm(Day_log, Day_Log$`Productivity Score`~ .)
lm(Day_Log, Day_Log$`Productivity Score`~ .)
plot(Day_Log$Date_format, Day_Log$`Health Score`)
plot(Day_Log$Date_format, Day_Log$`Health Score`)
plot(Day_Log$Date_format, Day_Log$`Health Score`)
plot(Day_Log$Date_format, Day_Log$`Health Score`, na.rm = TRUE)
plot(Day_Log$Date_format, Day_Log$`Health Score`)
plot(Day_Log$Date_format, Day_Log$`Health Score`)
plot(Day_Log$Date_format, Day_Log$`Health Score`)
plot(Day_Log$`Health Score`)
g <- plot(Day_Log$`Health Score`)
abline(g)
t = abline(g)
t
t <- plot(Day_Log$`Productivity Score`)
g <- plot(Day_Log$`Health Score`)
mean(Day_Log$`Health Score`)
sd(Day_Log$`Health Score`)
hist(mean(Day_Log$`Health Score`))
hist(Day_Log$`Health Score`)
plot(Day_Log$`Health Score`)
plot(Day_Log$`Vit K`)
PercK <- sum(Day_Log$`Vit A`)/36
PercK
paste(round(PercK*100,1), " Percent Consistency")
paste(round(PercK*100,1), " % Consistency")
paste(round(PercK*100,1), " % Vitamin K Consistency")
PercM <- sum(Day_Log$`Magnesium`)/36
PercM <- sum(Day_Log$`Magnesium`)/length(Day_Log)
paste(round(PercK*100,1), " % Magnesium")
PercM <- sum(Day_Log$`Magnesium`)/length(Day_Log)
paste(round(PercM*100,1), " % Magnesium")
PercKDA <- sum(Day_Log$`Vit A`)/ legnth(Day_Log)
PercKDA <- sum(Day_Log$`Vit A`)/ legnth(Day_Log)
PercKDA <- sum(Day_Log$`Vit A`)/ length(Day_Log)
paste(round(PercKDA*100,1), " % Vitamin K,D and A Consistency")
paste(round(PercM*100,1), " % Magnesium")
length(Day_Log)
View(Day_Log)
PercM <- sum(Day_Log$`Magnesium`)/length(Day_Log$Date_format)
PercKDA <- sum(Day_Log$`Vit A`)/ length(Day_Log$Date_format)
paste(round(PercKDA*100,1), " % Vitamin K,D and A Consistency")
paste(round(PercM*100,1), " % Magnesium")
Avg_study <- round(mean(Day_Log$`Academic Work`),2)
paste(Avg_study, " Hours Studied Per Day Average")
Mobility <- sum(Day_Log$`Mobility?`)/length(Day_Log$Date_format)
paste(round(Mobility*100,1), " % Mobility Consistency")
PercB <- sum(Day_Log$`Brush`)/length(Day_Log$Date_format)
paste(round(PercB*100,1), " % Brushing Consistency")
PercF <- sum(Day_Log$`Floss`)/length(Day_Log$Date_format)
paste(round(PercF*100,1), " % Flossing Consistency")
Day_Log <- Day_Log %>%
mutate(Week = c(1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5))
Day_Log <- Day_Log %>%
mutate(Week = c(1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6))
View(Day_Log)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
# Sum Academic Work Minutes
`Academic Work` = round(sum(ifelse(str_detect(Activity_1, "Academic") | str_detect(Activity_2, "Academic"), Duration, 0), na.rm = TRUE) / 60, 2),
`Focused Work` = round(sum(ifelse(str_detect(Activity_Area, "Focused_Work"), Duration, 0), na.rm = TRUE) / 60, 2), # Added closing parenthesis here
#Sum Mobility Minutes
`Mobility (h)` = round(sum(ifelse(str_detect(Activity_1, "Mobility"), Duration, 0), na.rm = TRUE) / 60, 2),
`Spiritual (h)` = round(sum(ifelse(str_detect(Activity_1, "Meditation"), Duration, 0), na.rm = TRUE) / 60, 2),
`Pages` = sum(Pages, na.rm = TRUE),
`Fascial Role` = as.integer(any(str_detect(Mobility_exercises, "Fascial_role"), na.rm = TRUE)),
`Hamstring Stretch` = as.integer(any(str_detect(Mobility_exercises, "Hamstring_stretch"), na.rm = TRUE)),
`Piriformis Stretch` = as.integer(any(str_detect(Mobility_exercises, "Piriformis_stretch"), na.rm = TRUE)),
`Childs Pose` = as.integer(any(str_detect(Mobility_exercises, "Childs_pose"), na.rm = TRUE)),
`Blaster Pose` = as.integer(any(str_detect(Mobility_exercises, "Blaster_pose"), na.rm = TRUE)),
`Hip Challenge` = as.integer(any(str_detect(Mobility_exercises, "Hip_challenge"), na.rm = TRUE)),
`Pigeon Pose` = as.integer(any(str_detect(Mobility_exercises, "Pigeon_pose"), na.rm = TRUE)),
`Cat Cow` = as.integer(any(str_detect(Mobility_exercises, "Cat_cow"), na.rm = TRUE)),
#Sum # of exercises
`Mobility Exercises` = (`Cat Cow` + `Fascial Role` + `Hamstring Stretch` + `Piriformis Stretch` + `Childs Pose` + `Blaster Pose` + `Hip Challenge` + `Pigeon Pose`),
`Mobility?` = ifelse(`Mobility Exercises` > 0, 1,0),
`Mobility Score` =  `Mobility?` + `Mobility (h)` + (`Mobility Exercises` /6 ),
# Convert TRUE/FALSE to 1/0 for vitamins presence
`Vit K` = as.integer(any(Vitamin_K2 > 0, na.rm = TRUE)),
`Vit A` = as.integer(any(Vitamin_A > 0, na.rm = TRUE)),
`Vit D` = as.integer(any(Vitamin_D > 0, na.rm = TRUE)),
`Vit C` = as.integer(any(Vitamin_C > 0, na.rm = TRUE)),
`Magnesium` = as.integer(any(Magnesium > 0, na.rm = TRUE)),
#Hygiene Habit List
`Brush` = as.integer(any(str_detect(Hygiene_habits, "Brush_teeth"), na.rm = TRUE)),
`Floss` = as.integer(any(str_detect(Hygiene_habits, "Floss_teeth"), na.rm = TRUE)),
`Cleanse` = as.integer(any(str_detect(Hygiene_habits, "Cleanse_face"), na.rm = TRUE)),
`Moisturize` = as.integer(any(str_detect(Hygiene_habits, "Moisturize_face"), na.rm = TRUE)),
`Finasteride` = as.integer(any(str_detect(Hygiene_habits, "Finasteride"), na.rm = TRUE)),
`Sunscreen` = as.integer(any(str_detect(Hygiene_habits, "Sunscreen"), na.rm = TRUE)),
`Shave` = as.integer(any(str_detect(Hygiene_habits, "Shave_face"), na.rm = TRUE)),
`Vitamin Score` = (`Vit K` + `Vit C`+ `Vit A` + `Vit D` + `Magnesium`)/2,
`Hygiene Score` = (`Brush`*1.5 + `Floss`*1.5 + `Cleanse` + `Moisturize` + `Finasteride` + `Sunscreen` + `Shave`)/3.5,
`Bought_Coffee` = as.integer(sum(str_detect(Beverage, "Coffee_bought"), na.rm = TRUE)),
`Health Score` = round(`Mobility Score` + `Vitamin Score` + `Hygiene Score` + `Spiritual (h)`,2),
`Productivity Score` = `Focused Work`
)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
# Sum Academic Work Minutes
`Mobility Exercises` = (`Cat Cow` + `Fascial Role` + `Hamstring Stretch` + `Piriformis Stretch` + `Childs Pose` + `Blaster Pose` + `Hip Challenge` + `Pigeon Pose`),
`Mobility?` = ifelse(`Mobility Exercises` > 0, 1,0),
`Mobility Score` =  `Mobility?` + `Mobility (h)` + (`Mobility Exercises` /6 ),
# Convert TRUE/FALSE to 1/0 for vitamins presence
`Vit K` = as.integer(any(Vitamin_K2 > 0, na.rm = TRUE)),
`Vit A` = as.integer(any(Vitamin_A > 0, na.rm = TRUE)),
`Vit D` = as.integer(any(Vitamin_D > 0, na.rm = TRUE)),
`Vit C` = as.integer(any(Vitamin_C > 0, na.rm = TRUE)),
`Magnesium` = as.integer(any(Magnesium > 0, na.rm = TRUE)),
#Hygiene Habit List
`Brush` = as.integer(any(str_detect(Hygiene_habits, "Brush_teeth"), na.rm = TRUE)),
`Floss` = as.integer(any(str_detect(Hygiene_habits, "Floss_teeth"), na.rm = TRUE)),
`Cleanse` = as.integer(any(str_detect(Hygiene_habits, "Cleanse_face"), na.rm = TRUE)),
`Moisturize` = as.integer(any(str_detect(Hygiene_habits, "Moisturize_face"), na.rm = TRUE)),
`Finasteride` = as.integer(any(str_detect(Hygiene_habits, "Finasteride"), na.rm = TRUE)),
`Sunscreen` = as.integer(any(str_detect(Hygiene_habits, "Sunscreen"), na.rm = TRUE)),
`Shave` = as.integer(any(str_detect(Hygiene_habits, "Shave_face"), na.rm = TRUE)),
`Vitamin Score` = (`Vit K` + `Vit C`+ `Vit A` + `Vit D` + `Magnesium`)/2,
`Hygiene Score` = (`Brush`*1.5 + `Floss`*1.5 + `Cleanse` + `Moisturize` + `Finasteride` + `Sunscreen` + `Shave`)/3.5,
`Bought_Coffee` = as.integer(sum(str_detect(Beverage, "Coffee_bought"), na.rm = TRUE)),
`Health Score` = round(`Mobility Score` + `Vitamin Score` + `Hygiene Score` + `Spiritual (h)`,2),
`Productivity Score` = `Focused Work`
)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
# Sum Academic Work Minutes
`Mobility Exercises` = (`Cat Cow` + `Fascial Role` + `Hamstring Stretch` + `Piriformis Stretch` + `Childs Pose` + `Blaster Pose` + `Hip Challenge` + `Pigeon Pose`),
`Mobility Score` =  `Mobility?` + `Mobility (h)` + (`Mobility Exercises` /6 ),
`Vitamin Score` = (`Vit K` + `Vit C`+ `Vit A` + `Vit D` + `Magnesium`)/2,
`Hygiene Score` = (`Brush`*1.5 + `Floss`*1.5 + `Cleanse` + `Moisturize` + `Finasteride` + `Sunscreen` + `Shave`)/3.5,
`Bought_Coffee` = as.integer(sum(str_detect(Beverage, "Coffee_bought"), na.rm = TRUE)),
`Health Score` = round(`Mobility Score` + `Vitamin Score` + `Hygiene Score` + `Spiritual (h)`,2),
`Productivity Score` = `Focused Work`
)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
# Sum Academic Work Minutes
`Mobility Exercises` = (`Cat Cow` + `Fascial Role` + `Hamstring Stretch` + `Piriformis Stretch` + `Childs Pose` + `Blaster Pose` + `Hip Challenge` + `Pigeon Pose`),
`Mobility Score` =  `Mobility?` + `Mobility (h)` + (`Mobility Exercises` /6 ),
`Vitamin Score` = (`Vit K` + `Vit C`+ `Vit A` + `Vit D` + `Magnesium`)/2,
`Hygiene Score` = (`Brush`*1.5 + `Floss`*1.5 + `Cleanse` + `Moisturize` + `Finasteride` + `Sunscreen` + `Shave`)/3.5,
`Health Score` = round(`Mobility Score` + `Vitamin Score` + `Hygiene Score` + `Spiritual (h)`,2),
`Productivity Score` = `Focused Work`
)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
`Mobility Exercises` = (`Cat Cow` + `Fascial Role` + `Hamstring Stretch` + `Piriformis Stretch` + `Childs Pose` + `Blaster Pose` + `Hip Challenge` + `Pigeon Pose`),
`Mobility Score` =  `Mobility?` + `Mobility (h)` + (`Mobility Exercises` /6 ),
`Vitamin Score` = (`Vit K` + `Vit C`+ `Vit A` + `Vit D` + `Magnesium`)/2,
`Hygiene Score` = (`Brush`*1.5 + `Floss`*1.5 + `Cleanse` + `Moisturize` + `Finasteride` + `Sunscreen` + `Shave`)/3.5,
`Health Score` = round(`Mobility Score` + `Vitamin Score` + `Hygiene Score` + `Spiritual (h)`,2),
`Productivity Score` = `Focused Work`
)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
Mobility = sum(`Mobility Score`)
)
View(By_Week)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`)
)
View(combinedPlot)
View(By_Week)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
Health <- mean(`Health Score`)
)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
Health <- mean(`Health Score`)
)
View(By_Week)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
Health <- round(mean(`Health Score`),2)
View(By_Week)
View(By_Week)
By_Week <- Day_Log %>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
Health = round(mean(`Health Score`),2)
)
View(By_Week)
View(By_Week)
By_Week <- Day_Log %>%
filter(Week >1 )%>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
Health = round(mean(`Health Score`),2)
)
View(By_Week)
By_Week <- Day_Log %>%
filter(Week >1 )%>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
Focused_Work (h) = sum(`Focused Work`),
View(By_Week)
By_Week <- Day_Log %>%
filter(Week >1 )%>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
`Focused_Work (h)` = sum(`Focused Work`),
Health = round(mean(`Health Score`),2)
)
View(By_Week)
plot(By_Week$Health, By_Week$`Focused_Work (h)`)
plot(Day_Log$`Health Score`, Day_Log$`Focused_Work (h)`)
plot(By_Week$Health, By_Week$`Focused_Work (h)`)
plot(Day_Log$`Health Score`, Day_Log$`Focused_Work (h)`)
plot(By_Week$Health, By_Week$`Focused_Work (h)`)
ggplot(df, aes(x = Day_Log$`Health Score`, y = Day_Log$`Focused Work`)) +
geom_line() +
theme_minimal() +
labs(title = "Line Plot of y vs. x", x = "x Variable", y = "y Variable")
ggplot(df, aes(x = Day_Log$`Health Score`, y = Day_Log$`Focused Work`)) +
geom_line() +
theme_minimal() +
labs(title = "Line Plot of y vs. x", x = "x Variable", y = "y Variable")
ggplot(Day_Log, aes(x = Day_Log$`Health Score`, y = Day_Log$`Focused Work`)) +
geom_line() +
theme_minimal() +
labs(title = "Line Plot of y vs. x", x = "x Variable", y = "y Variable")
ggplot(Day_Log, aes(x = `Health Score`, y = `Focused Work`)) +
geom_line() +
theme_minimal() +
labs(title = "Line Plot of y vs. x", x = "x Variable", y = "y Variable")
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density()
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density() +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density() + geom_line(size = 2 + )
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density(color = "blue", size = 2, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density(color = "lightblue", size = 2, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density(color = "lightblue", size = 1.5, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Date_Format`, y = `Healh Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Date_format`, y = `Healh Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Date_format`, y = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = Index, y = `Health Score`)) +
geom_line(size = 2) +  # This makes the line thicker
theme_minimal()  # Applies a minimal theme
ggplot(data = Day_Log, aes(x = `Date_format` , y = `Health Score`)) +
geom_line(size = 2) +  # This makes the line thicker
theme_minimal()  # Applies a minimal theme
Day_Log$Day <- seq_along(Day_Log$`Health Score`)
ggplot(data = Day_Log, aes(x = `Date_format`, y = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Day`, y = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = Day, y = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = Day , y = `Health Score`)) +
geom_line(size = 2) +  # This makes the line thicker
theme_minimal()  # Applies a minimal theme
ggplot(data = Day_Log, aes(x = Day , y = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = `Health Score`)) +
geom_density(color = "lightblue", size = 1, fill = "lightblue", alpha = 0.5) +
theme_minimal()
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_line() +  # Draws the line plot
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_line(size = 2) +  # Draws the line plot
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point() +  # Draws the line plot
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point() +  # Draws the line plot
geom_line()
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point() +  # Draws the line plot
geom_line() +
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point(color = "blue", alpha=.5) +  # Draws the line plot
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point(color = "blue", alpha=.5) +  # Draws the line plot
geom_smooth(method = "lm", se = TRUE, color = "blue", alpha = 0.2) +
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point() +  # Draws the points
geom_smooth(method = "lm", se = TRUE, color = "blue", alpha = 0.2) +  # Adds a faint trend line
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Adds labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjusts the x-axis labels
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point(color = "blue", alpha=.5) +  # Draws the line plot
geom_smooth(method = "lm", se = TRUE, color = "blue", alpha = 0.2) +
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Mobility Score`)) +
geom_point(color = "blue", alpha=.5) +  # Draws the line plot
geom_smooth(method = "lm", se = TRUE, color = "blue", alpha = 0.2) +
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Hygiene Score`)) +
geom_point(color = "blue", alpha=.5) +  # Draws the line plot
geom_smooth(method = "lm", se = TRUE, color = "blue", alpha = 0.2) +
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = Day_Log, aes(x = Date_format, y = `Health Score`)) +
geom_point(color = "blue", alpha=.5) +  # Draws the line plot
geom_smooth(method = "lm", se = TRUE, color = "blue", alpha = 0.2) +
theme_minimal() +  # Applies a minimal theme
labs(x = "Date", y = "Health Score", title = "Health Score over Time") +  # Labels
theme(axis.text.x = element_text(angle = 45, hjust = 1))
By_Week <- Day_Log %>%
filter(Week >1 )%>%
group_by(Week)%>%
summarise(
Mobility = mean(`Mobility Score`),
Hygiene = mean(`Hygiene Score`),
Vitamins = mean(`Vitamin Score`),
`Focused_Work (h)` = sum(`Focused Work`),
`Vit KDA Cons` = round(sum(`Vit K`)/7)*100,2,
Health = round(mean(`Health Score`),2)
)
View(By_Week)
